<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>dev.webfx</groupId>
    <artifactId>webfx-parent</artifactId>
    <version>0.1.0-SNAPSHOT</version>

    <packaging>pom</packaging>

    <properties>
        <!-- Webfx groupId & version -->
        <webfx.groupId>dev.webfx</webfx.groupId>
        <webfx.version>0.1.0-SNAPSHOT</webfx.version>

        <webfx.mainClass>dev.webfx.platform.shared.services.appcontainer.ApplicationContainer</webfx.mainClass>
        <webfx.mainModule>webfx.platform.shared.services.appcontainer</webfx.mainModule>

        <!-- java version -->
        <java.version>11</java.version>
        <java.level>${java.version}</java.level>
        <gwt.sourceLevel>1.${java.version}</gwt.sourceLevel>

        <!-- Applying compiler settings -->
        <maven.compiler.source>${java.level}</maven.compiler.source>
        <maven.compiler.target>${java.level}</maven.compiler.target>
        <maven.compiler.release>${java.level}</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- libraries versions -->
        <lib.openjfx.version>16</lib.openjfx.version>
        <lib.gwt.version>2.9.0</lib.gwt.version> <!-- can be switched to HEAD-SNAPSHOT on development machines to test the latest GWT version -->
        <lib.elemental2.groupId>com.google.elemental2</lib.elemental2.groupId>
        <lib.elemental2.version>1.1.0</lib.elemental2.version>

        <!-- Maven plugins versions -->
        <plugin.compiler.version>3.8.1</plugin.compiler.version>
        <plugin.jar.version>3.2.0</plugin.jar.version>
        <plugin.source.version>3.2.0</plugin.source.version>
        <plugin.dependency.version>3.1.2</plugin.dependency.version>
        <plugin.shade.version>3.2.4</plugin.shade.version>

        <!-- Third-party plugins versions -->
        <plugin.gwt.version>1.0.0</plugin.gwt.version>
        <plugin.gluon.version>0.1.35</plugin.gluon.version>
        <plugin.javapackager.version>1.4.2</plugin.javapackager.version>
        <plugin.javafx.version>0.0.3</plugin.javafx.version>

        <!-- Plugin parameters with default values or set to TBD (To Be Defined) by any child module using the plugin -->
        <plugin.compiler.param.exclude></plugin.compiler.param.exclude>
        <plugin.jar.param.addMavenDescriptor>true</plugin.jar.param.addMavenDescriptor>
        <plugin.dependency.param.unpack-sources.phase>validate</plugin.dependency.param.unpack-sources.phase>
        <plugin.dependency.param.unpack-classes.phase>validate</plugin.dependency.param.unpack-classes.phase>
        <plugin.dependency.param.unpack-classes.includes>**</plugin.dependency.param.unpack-classes.includes>
        <plugin.dependency.param.unpack-classes.outputDirectory>${project.build.outputDirectory}</plugin.dependency.param.unpack-classes.outputDirectory>
        <plugin.dependency.param.copy-libs.phase>validate</plugin.dependency.param.copy-libs.phase>
        <plugin.shade.param.fat.phase>package</plugin.shade.param.fat.phase>
        <plugin.antrun.param.j2objc.phase>compile</plugin.antrun.param.j2objc.phase>
        <plugin.gwt.param.skipCompilation>true</plugin.gwt.param.skipCompilation>
        <plugin.gwt.param.draftCompile>false</plugin.gwt.param.draftCompile>
        <plugin.gwt.param.optimize>9</plugin.gwt.param.optimize>
        <plugin.gwt.param.module>${project.artifactId}</plugin.gwt.param.module>
        <plugin.gluon.param.target>TBD</plugin.gluon.param.target>
        <plugin.gluon.param.mainClass>${webfx.mainClass}</plugin.gluon.param.mainClass>
        <plugin.javapackager.name>WebFxApp</plugin.javapackager.name>
        <plugin.javapackager.displayName>WebFx Application</plugin.javapackager.displayName>
        <plugin.javapackager.url>TBD</plugin.javapackager.url>
        <plugin.javapackager.organizationName>WebFx</plugin.javapackager.organizationName>
        <plugin.javapackager.organizationUrl>https://webfx.dev</plugin.javapackager.organizationUrl>
        <plugin.javapackager.organizationEmail>info@webfx.dev</plugin.javapackager.organizationEmail>

        <application.name>${project.name}</application.name>
        <application.version>${project.version}</application.version>
        <!-- Build number property (should be set by Jenkins server each time a new build is started) -->
        <!-- Will be passed to GWT compiler so that the java code can get its value using System.getProperty("build.number") -->
        <application.build.number>0</application.build.number>
        <application.build.tool>MAVEN</application.build.tool>
        <!-- Build timestamp property (automatically set using maven but can be overridden using Jenkins) -->
        <!-- Will be passed to GWT compiler so that the java code can get its value using System.getProperty("build.timestamp") -->
        <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ss'.000'X</maven.build.timestamp.format>
        <application.build.timestamp>${maven.build.timestamp}</application.build.timestamp>
    </properties>

    <pluginRepositories>
        <!-- Adding Snapshots repository which is required to get the GWT 2.8.1-SNAPSHOT Maven plugin -->
        <pluginRepository>
            <id>snapshots</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
            <releases><enabled>false</enabled></releases>
            <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
    </pluginRepositories>

    <repositories>

        <!-- For Gluon -->
        <repository>
            <id>Gluon</id>
            <url>https://nexus.gluonhq.com/nexus/content/repositories/releases</url>
            <releases><enabled>true</enabled></releases>
            <snapshots><enabled>false</enabled></snapshots>
        </repository>

    </repositories>

    <distributionManagement>

        <!-- To tell mvn deploy to deploy snapshots to Sonatype repository  -->
        <snapshotRepository>
            <id>sonatype-deploy</id> <!-- server username & password must be set in settings.xml -->
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>

    </distributionManagement>

    <dependencyManagement>
        <dependencies>

            <!--
             ***************************************************************
             * Libraries required for the GWT Platform (webfx-platform-gwt) *
             ***************************************************************
             -->

            <dependency>
                <groupId>com.google.gwt</groupId>
                <artifactId>gwt</artifactId>
                <version>${lib.gwt.version}</version>
                <type>pom</type>
                <scope>import</scope>
                <exclusions>
                    <exclusion>
                        <groupId>javax.validation</groupId>
                        <artifactId>validation-api</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

            <dependency>
                <groupId>${lib.elemental2.groupId}</groupId>
                <artifactId>elemental2-core</artifactId>
                <version>${lib.elemental2.version}</version>
            </dependency>

            <dependency>
                <groupId>${lib.elemental2.groupId}</groupId>
                <artifactId>elemental2-dom</artifactId>
                <version>${lib.elemental2.version}</version>
            </dependency>

            <dependency>
                <groupId>${lib.elemental2.groupId}</groupId>
                <artifactId>elemental2-svg</artifactId>
                <version>${lib.elemental2.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>

        <pluginManagement>
            <!-- plugins listed here are just pre-configured for a possible use in a module -->
            <plugins>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${plugin.compiler.version}</version>
                    <configuration>
                        <release>${java.version}</release>
                    </configuration>
                </plugin>


                <!--
                 **********************************
                 * Maven jar plugin configuration *
                 **********************************
                 -->
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${plugin.jar.version}</version>
                    <configuration>
                        <archive>
                            <!-- Whether or not including META-INF/maven/** coming from dependencies -->
                            <addMavenDescriptor>${plugin.jar.param.addMavenDescriptor}</addMavenDescriptor>
                        </archive>
                    </configuration>
                </plugin>


                <!--
                 **************************************
                 * Maven sources plugin configuration *
                 **************************************
                 Plugin to generate the sources artifacts which will be used by GWT which is java source code transpiler (and not a bytecode transpiler like TeaVM)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${plugin.source.version}</version>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 *****************************************
                 * Maven dependency plugin configuration *
                 *****************************************
                 Plugin to unpack dependencies with their source. This is required before calling j2objc
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${plugin.dependency.version}</version>
                    <executions>
                        <execution>
                            <id>unpack-sources</id>
                            <phase>${plugin.dependency.param.unpack-sources.phase}</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <classifier>sources</classifier>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/sources</outputDirectory>
                            </configuration>
                        </execution>
                        <execution>
                            <id>unpack-classes</id>
                            <phase>${plugin.dependency.param.unpack-classes.phase}</phase>
                            <goals>
                                <goal>unpack-dependencies</goal>
                            </goals>
                            <configuration>
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${plugin.dependency.param.unpack-classes.outputDirectory}</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                                <includes>${plugin.dependency.param.unpack-classes.includes}</includes>
                                <!-- Excluding maven dependencies metadata (can be big and is useless here) -->
                                <excludes>META-INF/maven/**</excludes>
                            </configuration>
                        </execution>
                        <!-- Also copying these libraries in a lib folder for eventual reference in the classpath -->
                        <execution>
                            <id>copy-libs</id>
                            <phase>${plugin.dependency.param.copy-libs.phase}</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration >
                                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                                <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                <overWriteReleases>true</overWriteReleases>
                                <overWriteSnapshots>true</overWriteSnapshots>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                 ******************************
                 * Shade plugin configuration *
                 ******************************
                 Shade is a plugin to build fat jars (with all dependencies included in it)
                 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${plugin.shade.version}</version>
                    <executions>
                        <execution>
                            <id>fat</id>
                            <phase>${plugin.shade.param.fat.phase}</phase>
                            <goals>
                                <goal>shade</goal>
                            </goals>
                            <configuration>
                                <!-- the output will have the classifier "-fat"  -->
                                <shadedArtifactAttached>true</shadedArtifactAttached>
                                <shadedClassifierName>fat</shadedClassifierName>
                                <transformers>
                                    <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                        <manifestEntries>
                                            <Main-Class>${webfx.mainClass}</Main-Class>
                                            <Class-Path></Class-Path>
                                        </manifestEntries>
                                    </transformer>
                                    <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                </transformers>
                                <filters>
                                    <filter>
                                        <artifact>*:*</artifact>
                                        <excludes>
                                            <exclude>META-INF/maven/**</exclude>
                                        </excludes>
                                    </filter>
                                </filters>
                                <createDependencyReducedPom>false</createDependencyReducedPom>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 ****************************
                 * GWT plugin configuration *
                 ****************************
                 -->
                <plugin>
                    <groupId>net.ltgt.gwt.maven</groupId>
                    <artifactId>gwt-maven-plugin</artifactId>
                    <version>${plugin.gwt.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <skipCompilation>${plugin.gwt.param.skipCompilation}</skipCompilation>
                        <moduleName>${plugin.gwt.param.module}</moduleName>
                        <failOnError>true</failOnError>
                        <draftCompile>${plugin.gwt.param.draftCompile}</draftCompile>
                        <optimize>${plugin.gwt.param.optimize}</optimize>
                        <sourceLevel>${gwt.sourceLevel}</sourceLevel>
                        <!-- Trying to solve a java heap OutOfMemoryError on the server -->
                        <jvmArgs>
                            <jvmArg>-Xmx1024m</jvmArg>
                        </jvmArgs>
                        <!--<localWorkers>1</localWorkers>-->
                    </configuration>
                </plugin>


                <!--
                 ******************************
                 * Gluon plugin configuration *
                 ******************************
                 -->
                <plugin>
                    <groupId>com.gluonhq</groupId>
                    <artifactId>client-maven-plugin</artifactId>
                    <version>${plugin.gluon.version}</version>
                    <configuration>
                        <target>${plugin.gluon.param.target}</target>
                        <mainClass>${plugin.gluon.param.mainClass}</mainClass>
                        <nativeImageArgs>
                            <!-- SL4J -->
                            <arg>--allow-incomplete-classpath</arg>
                            <arg>-H:ReflectionConfigurationFiles=${project.basedir}/src/main/graalvm_conf/reflection.json</arg>
                        </nativeImageArgs>
                    </configuration>
                </plugin>


                <!--
                 ******************************************************************************************
                 * Javapackager plugin configuration (MacOS/Linux package & windows installer generation) *
                 ******************************************************************************************
                 -->
                <plugin>
                    <groupId>io.github.fvarrui</groupId>
                    <artifactId>javapackager</artifactId>
                    <version>${plugin.javapackager.version}</version>
                    <executions>
                        <execution>
                            <phase>package</phase>
                            <goals>
                                <goal>package</goal>
                            </goals>
                            <configuration>
                                <!-- mandatory -->
                                <mainClass>${webfx.mainClass}</mainClass>
                                <!-- optional -->
                                <bundleJre>true</bundleJre>
                                <name>${plugin.javapackager.name}</name>
                                <displayName>${plugin.javapackager.displayName}</displayName>
                                <url>${plugin.javapackager.url}</url>
                                <organizationName>${plugin.javapackager.organizationName}</organizationName>
                                <organizationUrl>${plugin.javapackager.organizationUrl}</organizationUrl>
                                <organizationEmail>${plugin.javapackager.organizationEmail}</organizationEmail>
                                <outputDirectory>${project.build.directory}/javapackager</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!--
                 ********************************************************
                 * JavaFx plugin configuration (jlink Image generation) *
                 ********************************************************
                 -->
                <plugin>
                    <groupId>org.openjfx</groupId>
                    <artifactId>javafx-maven-plugin</artifactId>
                    <version>${plugin.javafx.version}</version>
                    <configuration>
                        <release>${maven.compiler.release}</release>
                        <jlinkImageName>jlinkImage</jlinkImageName>
                        <launcher>launcher</launcher>
                        <mainClass>${webfx.mainModule}/${webfx.mainClass}</mainClass>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>

    </build>

    <profiles>

        <!-- profile to compile the java code into javascript using GWT -->
        <profile>
            <id>gwt-compile</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <properties>
                <plugin.gwt.param.skipCompilation>false</plugin.gwt.param.skipCompilation>
            </properties>
        </profile>

        <profile>
            <id>gluon-desktop</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <plugin.gluon.param.target>host</plugin.gluon.param.target>
            </properties>
        </profile>

        <profile>
            <id>gluon-ios</id>
            <properties>
                <plugin.gluon.param.target>ios</plugin.gluon.param.target>
            </properties>
        </profile>

        <profile>
            <id>gluon-android</id>
            <properties>
                <plugin.gluon.param.target>android</plugin.gluon.param.target>
            </properties>
        </profile>

    </profiles>

</project>